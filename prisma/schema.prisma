// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts            Account[]
  sessions            Session[]
  ownedWorkspaces     Workspace[]           @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMembership[]
  invitedMemberships  WorkspaceMembership[] @relation("InvitedBy")
  sentInvitations     WorkspaceInvitation[] @relation("WorkspaceInviter")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Multi-tenant workspace system
model Workspace {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  ownerId   String   @map("owner_id")
  planType  String   @default("free") @map("plan_type") // free, starter, pro
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner       User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  memberships WorkspaceMembership[]
  invitations WorkspaceInvitation[]

  @@map("workspaces")
}

model WorkspaceMembership {
  id          String    @id @default(uuid())
  workspaceId String    @map("workspace_id")
  userId      String    @map("user_id")
  role        String    // owner, admin, member
  invitedBy   String?   @map("invited_by")
  invitedAt   DateTime? @map("invited_at")
  joinedAt    DateTime  @default(now()) @map("joined_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter   User?     @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@unique([workspaceId, userId])
  @@map("workspace_memberships")
}

model WorkspaceInvitation {
  id          String    @id @default(uuid())
  workspaceId String    @map("workspace_id")
  email       String
  role        String    // owner, admin, member
  invitedBy   String    @map("invited_by")
  invitedAt   DateTime  @default(now()) @map("invited_at")
  expiresAt   DateTime  @map("expires_at")
  accepted    Boolean   @default(false)
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter   User      @relation("WorkspaceInviter", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@map("workspace_invitations")
}